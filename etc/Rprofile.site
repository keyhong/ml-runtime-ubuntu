
options(repos = structure(c(CRAN = "https://cran.rstudio.com")))
invisible(Sys.setlocale(category = "LC_ALL", locale = "en_US.UTF-8"))


`__cml_put_runtime_lib_before_cmladdon` <- function(shouldLog) {
  if (shouldLog) {
    message("Start  cml_put_runtime_lib_before_cmladdon")
  }
  current_paths <- .libPaths()
  cmladdon_lib_path <- "/opt/cmladdons/r/libs"
  runtime_lib_path <- "/usr/local/lib/R/library"

  cmladdon_lib_path_index <- grep(cmladdon_lib_path, current_paths)
  runtime_lib_path_index <- grep(runtime_lib_path, current_paths)
  if (length(cmladdon_lib_path_index) == 0 || length(runtime_lib_path_index) == 0) {
    if (shouldLog) {
      message("Finish cml_put_runtime_lib_before_cmladdon: cmladdon or runtime_lib not on path")
    }
    return()
  }

  min_cmladdon_lib_path_index <- min(cmladdon_lib_path_index)
  min_runtime_lib_path_index <- min(runtime_lib_path_index)

  if (min_cmladdon_lib_path_index < min_runtime_lib_path_index) {
    if (shouldLog) {
      message("Finish cml_put_runtime_lib_before_cmladdon: cmladdon comes before runtime_lib. Fixing that.")
    }
    new_paths <- append(current_paths, runtime_lib_path, after = min_cmladdon_lib_path_index - 1)
    .libPaths(new_paths)
  } else if (shouldLog) {
    message("Finish cml_put_runtime_lib_before_cmladdon: runtime_lib comes before cmladdon. Nothing to do.")
  }
  return()
}

if (Sys.getenv("CML_R_NO_RUNTIME_LIB_BEFORE_CMLADDON_ON_U24") == "TRUE") {
  message("CML_R_NO_RUNTIME_LIB_BEFORE_CMLADDON_ON_U24 is set. Skipping fixing the path.")
} else {
  `__cml_r_site_init_shouldLog` <- Sys.getenv("CML_R_NO_RUNTIME_LIB_BEFORE_CMLADDON_ON_U24_LOG") == "TRUE"
  try(invisible(`__cml_put_runtime_lib_before_cmladdon`(`__cml_r_site_init_shouldLog`)), silent = !`__cml_r_site_init_shouldLog`)
  try(rm(`__cml_r_site_init_shouldLog`), silent = TRUE)
}

try(rm(`__cml_put_runtime_lib_before_cmladdon`), silent = TRUE)


